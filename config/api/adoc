#!/usr/bin/env sh

#export adoc_sourced=true

#adoc_compile() {
#  # &0: 
#  # $1: Write path to table-of-contents file hunk
#  # $2: Write path to main-content file hunk
#
#  # Probably should use `adoc_include_by_tag` instead of printing an include
#  <&0 asciidoctor - --out-file - \
#      --attribute toc --attribute toc-title="" \
#      --no-header-footer \
#    | adoc_Split2 "${1}" "${2}"
#}

adoc_To_htmL() {
  # &0: Post
  <&0 asciidoctor - --out-file - \
    --attribute toc --attribute toc-title="" \
    --attribute source-highlighter='pygments' \
    --attribute 'webfonts!' \
    --attribute imagesdir="${DOMAIN}/images" \
    --no-header-footer
  pygments_theme
}

adoc_Split() {
  # &0: Original markup post to extract from
  # $1: Write path to table-of-contents file hunk
  # $2: Write path to main-content file hunk

  # Eat the first line of input and test if there is a toc
  IFS= read -r _adoc_split_line
  if [ "${_adoc_split_line}" != "${_adoc_split_line#<div id=\"toc\"}" ]; then
    {
      _adoc_split_entry=''
      _adoc_split_count='1'

      printf %s\\n "${_adoc_split_line}"
      while IFS= read -r _adoc_split_line; do
        # Signal start for counting toc
        _adoc_split_entry="${_adoc_split_line}"
        while [ "${_adoc_split_entry}" != "${_adoc_split_entry#*<div}" ]; do
          _adoc_split_entry="${_adoc_split_line#*<div}"
          _adoc_split_count="$(( _adoc_split_count + 1 ))"
        done

        _adoc_split_entry="${_adoc_split_line}"
        while [ "${_adoc_split_entry}" != "${_adoc_split_entry#*</div}" ]; do
          _adoc_split_entry="${_adoc_split_line#*</div}"
          _adoc_split_count="$(( _adoc_split_count - 1 ))"
        done

        printf %s\\n "${_adoc_split_line}"
        if [ "${_adoc_split_count}" -le 0 ]; then
          break
        fi
      done
    } >"${1}"

    # print the table of contents
    while IFS= read -r _adoc_split_line; do
      _adoc_split_count="$(( _adoc_split_count + 1 ))"
      printf %s\\n "${_adoc_split_line}"
    done >"${2}"
  else
    printf "" >"${1}"
    {
      # Just print out the entire file
      printf %s\\n "${_adoc_split_line}"
      cat -
      #while IFS= read -r _adoc_split_line; do
      #  printf %s\\n "${_adoc_split_line}"
      #done
    } >"${2}"
  fi
}


pygments_theme() {
  # https://github.com/jwarby/jekyll-pygments-themes/blob/master/vs.css
  # vs theme
  <<EOF cat -
<style>
pre.pygments .tok-hll { background-color: #ffffcc }
pre.pygments .tok-c { color: #008000 } /* Comment */
pre.pygments .tok-err { border: 1px solid #FF0000 } /* Error */
pre.pygments .tok-k { color: #0000ff } /* Keyword */
pre.pygments .tok-cm { color: #008000 } /* Comment.Multiline */
pre.pygments .tok-cp { color: #0000ff } /* Comment.Preproc */
pre.pygments .tok-c1 { color: #008000 } /* Comment.Single */
pre.pygments .tok-cs { color: #008000 } /* Comment.Special */
pre.pygments .tok-ge { font-style: italic } /* Generic.Emph */
pre.pygments .tok-gh { font-weight: bold } /* Generic.Heading */
pre.pygments .tok-gp { font-weight: bold } /* Generic.Prompt */
pre.pygments .tok-gs { font-weight: bold } /* Generic.Strong */
pre.pygments .tok-gu { font-weight: bold } /* Generic.Subheading */
pre.pygments .tok-kc { color: #0000ff } /* Keyword.Constant */
pre.pygments .tok-kd { color: #0000ff } /* Keyword.Declaration */
pre.pygments .tok-kn { color: #0000ff } /* Keyword.Namespace */
pre.pygments .tok-kp { color: #0000ff } /* Keyword.Pseudo */
pre.pygments .tok-kr { color: #0000ff } /* Keyword.Reserved */
pre.pygments .tok-kt { color: #2b91af } /* Keyword.Type */
pre.pygments .tok-s { color: #a31515 } /* Literal.String */
pre.pygments .tok-nc { color: #2b91af } /* Name.Class */
pre.pygments .tok-ow { color: #0000ff } /* Operator.Word */
pre.pygments .tok-sb { color: #a31515 } /* Literal.String.Backtick */
pre.pygments .tok-sc { color: #a31515 } /* Literal.String.Char */
pre.pygments .tok-sd { color: #a31515 } /* Literal.String.Doc */
pre.pygments .tok-s2 { color: #a31515 } /* Literal.String.Double */
pre.pygments .tok-se { color: #a31515 } /* Literal.String.Escape */
pre.pygments .tok-sh { color: #a31515 } /* Literal.String.Heredoc */
pre.pygments .tok-si { color: #a31515 } /* Literal.String.Interpol */
pre.pygments .tok-sx { color: #a31515 } /* Literal.String.Other */
pre.pygments .tok-sr { color: #a31515 } /* Literal.String.Regex */
pre.pygments .tok-s1 { color: #a31515 } /* Literal.String.Single */
pre.pygments .tok-ss { color: #a31515 } /* Literal.String.Symbol */
</style>
EOF
}




case "${1}"
  in frontmatter)
    <&0 sed -ne '/^:[A-Za-z0-9_-]\+:/{
      s/ *$//
      s/^://
      s/: */:/
      p
    }'
  ;; compile) <&0 adoc_To_htmL | adoc_Split "${2}" "${3}"
  ;; to_html) <&0 adoc_To_htmL
  ;; split)   <&0 adoc_Split "${2}" "${3}"
  ;; comment) printf '//'
  ;; *)     exit 1
esac
#<"${1}" adoc_Split a b

#split() {
#   printf %s "${_adoc_split_line}"
#  printf %s\\n "${_adoc_split_count}"
#  _length="$( awk '
#    /^<div id="toc" .*>$/ { start = 1; }
#    (start && count >= 0) {
#      temp = $0;
#      count = count + gsub(/<div/, "", temp) - gsub(/<\/div *>/, "", temp)
#    }
#    (start && count <= 0) { print NR; exit; }
#  ' )"
#  [ -z "${_length}" ] && { printf %s\\n "No table of contents found"; exit 1; }
#  sed "${_length}q" "${1}"
#  sed "1,${_length}d" "${1}"
#}
